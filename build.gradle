
apply plugin: 'java'
apply plugin: 'eclipse'


buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "org.springframework.boot:spring-boot-gradle-plugin:2.0.0.RELEASE"
  }
}

apply plugin: "org.springframework.boot"

compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    jcenter()
}

dependencies {
	compile "org.springframework.boot:spring-boot-starter:2.0.0.RELEASE"
	compile "org.springframework.boot:spring-boot-starter-web:2.0.0.RELEASE"
	compile "org.springframework.boot:spring-boot-starter-thymeleaf:2.0.0.RELEASE"
	compile 'org.springframework.boot:spring-boot-starter-websocket:2.0.0.RELEASE'
	compile 'org.springframework:spring-webmvc:5.0.5.RELEASE'
	compile "org.springframework.hateoas:spring-hateoas:0.24.0.RELEASE"
	compile 'org.webjars:sockjs-client:1.0.2'
  	compile 'org.webjars:stomp-websocket:2.3.3'
	compile 'javax.inject:javax.inject:1'

    compile 'org.apache.commons:commons-math3:3.6.1'
    
    testImplementation 'junit:junit:4.12'

  	testImplementation 'org.hamcrest:hamcrest-core:1.3'
  	testImplementation 'org.hamcrest:hamcrest-library:1.3'
  	testImplementation 'org.exparity:hamcrest-date:2.0.1'
  	testImplementation 'org.mockito:mockito-core:2.18.3'
  	  
  	testCompile "org.springframework.boot:spring-boot-starter-test:2.0.0.RELEASE"
    
    compile 'org.apache.commons:commons-lang3:3.6'
  	compile 'commons-io:commons-io:2.5'
  	compile 'org.webjars:jquery:2.2.4' 	
  	compile 'org.webjars:bootstrap:3.3.6'
}

afterEvaluate {
	extractWebJars.deps = configurations.compile.allDependencies.findAll { it.group.startsWith("org.webjars") };
	extractWebJars.testDeps = configurations.testCompile.allDependencies.findAll { it.group.startsWith("org.webjars") }
	extractWebJars.inputs.property("compile.webjars", extractWebJars.deps.toString())
	extractWebJars.inputs.property("testCompile.webjars", extractWebJars.testDeps.toString())
}


task extractWebJars(dependsOn:[compileJava, compileTestJava]) {
	ext.deps = null;
	ext.testDeps = null;
	outputs.dir file("${buildDir}/webjars")
	doFirst {
		
		def files = configurations.compile.files(deps.toArray(new Dependency[0]))
		files.addAll configurations.testCompile.files(testDeps.toArray(new Dependency[0]))

		copy {
			files.each { 
				from(zipTree(it))
			}
			into("${buildDir}/webjars")
			includeEmptyDirs = false
			eachFile { FileCopyDetails fcp ->
	            if (fcp.relativePath.pathString.startsWith("META-INF/resources/webjars/")) {
	              // remap the file within zip file
	              fcp.relativePath = new RelativePath(!fcp.file.isDirectory(), fcp.relativePath.segments[3..-1] as String[])
	            } else {
	              	fcp.exclude()
	            }
	        }
		}
	}
}


